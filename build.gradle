plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id "me.modmuss50.mod-publish-plugin" version "0.8.3"
    id 'maven-publish'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

repositories {
    maven { url "https://maven.nucleoid.xyz/" }
}

sourceSets {
    testMod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    createRemapConfigurations(sourceSets.testMod)

    runs {
        testModClient {
            client()
            name = "Test Mod Client"
            source sourceSets.testMod
        }

        testModServer {
            server()
            name = "Test Mod Server"
            source sourceSets.testMod
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modCompileOnly "eu.pb4:placeholder-api:${project.placeholder_api_version}"

    // testmod
    testModImplementation sourceSets.main.output
    modTestModImplementation "eu.pb4:placeholder-api:${project.placeholder_api_version}"
    modTestModImplementation fabricApi.module("fabric-command-api-v2", project.fabric_version)
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    type = STABLE

    displayName = "message-api ${version.get()}"
    changelog = ""

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "BJEC0JAD"
        minecraftVersions.add(project.minecraft_version)
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
